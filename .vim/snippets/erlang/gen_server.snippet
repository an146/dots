-behaviour(gen_server).

%% Public API
-export([start_link/1, start_link/2]).
%% gen_server
-export([init/1, terminate/2, code_change/3,
        handle_call/3, handle_cast/2, handle_info/2]).


%%====================================================================
%% Constants definitions.
%%====================================================================

-define(SERVER, ?MODULE).


%%====================================================================
%% Public API
%%====================================================================

%% @doc Start linked server process.
%%
%% @arg ServerName -- the same as ServerName for gen_server:start_link().
%% @arg Opts       -- TODO: describe
%%
start_link(ServerName, Opts) ->
    gen_server:start_link(ServerName, ?MODULE, Opts, []).

%% @doc Start the server process, registered with default name.
%% @equiv start_link({local, fact_processor}, Master)
start_link(Master) ->
    start_link({local, ?SERVER}, Master).


%%====================================================================
%% gen_server callbacks
%%====================================================================

%%--------------------------------------------------------------------
%% Function: init(Args) -> {ok, State} |
%%                         {ok, State, Timeout} |
%%                         ignore               |
%%                         {stop, Reason}
%% Description: Initiates the server
%%--------------------------------------------------------------------
%%
init(_Opts) ->
    State = [],
    {ok, State}.


%%--------------------------------------------------------------------
%% Function: terminate(Reason, State) -> void()
%% Description: This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any necessary
%% cleaning up. When it returns, the gen_server terminates with Reason.
%% The return value is ignored.
%%--------------------------------------------------------------------
%%
terminate(_Reason, _S) ->
    true.


%%%--------------------------------------------------------------------
%% Function: %% handle_call(Request, From, State) -> {reply, Reply, State} |
%%                                      {reply, Reply, State, Timeout} |
%%                                      {noreply, State} |
%%                                      {noreply, State, Timeout} |
%%                                      {stop, Reason, Reply, State} |
%%                                      {stop, Reason, State}
%% Description: Handling call messages
%%--------------------------------------------------------------------
%% Anything else generates an error log message and response.
%%
handle_call(Call, _From, S) ->
    {reply, {error, invalid_call, Call}, S}.


%%--------------------------------------------------------------------
%% Function: handle_cast(Msg, State) -> {noreply, State} |
%%                                      {noreply, State, Timeout} |
%%                                      {stop, Reason, State}
%% Description: Handling cast messages
%%--------------------------------------------------------------------
%% Anything else generates an error log message
%%
handle_cast(Cast, S) ->
    io:format("unexpected cast: ~p~n", Cast),
    {noreply, S}.


%%--------------------------------------------------------------------
%% Function: handle_info(Info, State) -> {noreply, State} |
%%                                       {noreply, State, Timeout} |
%%                                       {stop, Reason, State}
%% Description: Handling all non call/cast messages
%%--------------------------------------------------------------------
%%
handle_info(Info, S) ->
    io:format("unexpected message: ~p~n", Info),
    {noreply, S}.


%%--------------------------------------------------------------------
%% Func: code_change(OldVsn, State, Extra) -> {ok, NewState}
%% Description: Convert process state when code is changed
%%--------------------------------------------------------------------
%%
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.


%%====================================================================
%% Internal functions
%%====================================================================

